import http.server
import http.client

class ReverseProxy(http.server.BaseHTTPRequestHandler):
    def do_GET(self):
        # modify the request headers
        self.headers["Host"] = "example.com"
        self.headers["User-Agent"] = "Mozilla/5.0"
        self.headers["Accept-Encoding"] = "gzip, deflate"
        self.headers["Connection"] = "keep-alive"
        self.headers["Upgrade-Insecure-Requests"] = "1"
        
        # send the modified request to the destination server
        conn = http.client.HTTPSConnection("example.com")
        conn.request("GET", self.path, headers=self.headers)
        
        # get the response from the destination server
        response = conn.getresponse()
        data = response.read()
        
        # set the response headers
        self.send_response(response.status)
        for header, value in response.getheaders():
            if header != "Transfer-Encoding":
                self.send_header(header, value)
        self.end_headers()
        
        # send the response to the client
        self.wfile.write(data)
        
if __name__ == "__main__":
    server_address = ("", 8080)
    httpd = http.server.HTTPServer(server_address, ReverseProxy)
    httpd.serve_forever()

    
    
    #This script creates a simple HTTP server that listens on port 8080 and forwards all incoming requests to example.com. You can modify the do_GET method to handle other HTTP methods and add additional headers as needed. Keep in mind that this is just a basic example and there are many more features that can be added to a reverse proxy.



