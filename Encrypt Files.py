import os
import struct
import random
import hashlib
from Crypto.Cipher import AES

def encrypt_file(key, in_filename, out_filename=None, chunksize=64*1024):
    """Encrypts a file using AES algorithm."""
    if not out_filename:
        out_filename = in_filename + '.encrypted'

    # Generate initialization vector and encryptor.
    iv = ''.join(chr(random.randint(0, 0xFF)) for i in range(16))
    encryptor = AES.new(key, AES.MODE_CBC, iv)

    # Get file size and write iv to output file.
    filesize = os.path.getsize(in_filename)
    with open(out_filename, 'wb') as outfile:
        outfile.write(struct.pack('<Q', filesize))
        outfile.write(iv)

        # Read file in chunks and encrypt each chunk.
        with open(in_filename, 'rb') as infile:
            while True:
                chunk = infile.read(chunksize)
                if len(chunk) == 0:
                    break
                elif len(chunk) % 16 != 0:
                    chunk += ' ' * (16 - len(chunk) % 16)

                outfile.write(encryptor.encrypt(chunk))

def main():
    # Get key from user.
    key = raw_input('Enter encryption key: ')

    # Hash key to generate 32-byte (256-bit) key.
    key = hashlib.sha256(key).digest()

    # Encrypt file.
    filename = raw_input('Enter filename to encrypt: ')
    encrypt_file(key, filename)

if __name__ == '__main__':
    main()

    
    
    #To use this script, simply run it in a Python environment, enter a key to encrypt the file, and enter the filename to encrypt. The script will generate a new file with the same name as the original file, but with a .encrypted extension, and the contents of the file will be encrypted using the AES algorithm.



